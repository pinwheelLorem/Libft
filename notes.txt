These are my notes for libft:

##memset.c function:
for void *: is a void pointer that has no associated data type with it, it can hold the adress of any type and can be typecasted to any type:
https://www.geeksforgeeks.org/void-pointer-c-cpp/
int a = 10;
char b = 'x';

void *p = &a; // void pointer holds address of int 'a'
p = &b; // void pointer holds address of char 'b'

for memset function:
https://www.tutorialspoint.com/c_standard_library/c_function_memset.htm

//the free error when try to free the mallocin the main()
https://stackoverflow.com/questions/20297524/c-free-invalid-pointer
Actually, I did my var in the main() so it's auto in the stack so no nead to free or malloc
when declaring a variable and use malloc like this:
https://stackoverflow.com/questions/21061796/malloc-works-without-type-cast-before-malloc-c-c

char *ptr;
ptr = malloc(sizeof(char)*N);
ptr will point to an integer array, there is no need to cast.

//segumentation fault error:
I was getting SFT when running the code without srtrcpy:
#include "libft.h"

void	*ft_memset(void *str, int c, size_t n)
{
	char *s;

	s = str;
	while (n--)
	{
		*s++ = c;
		s++;
		n--;
	}
	return (s);
let g:user42 = 'fgabri'
let g:mail42 = 'fgabri@student.42.fr'
}

int	main()
{
	char *str;
	str = malloc(sizeof(char)*50);
	strcpy(str,"hello my name is fatima");
	memset(str, 'a', 3);
	puts(str);
}

I was writing:
int	main()
{
	char *str;
	str = malloc(sizeof(char)*50);
	str = "hello my name is fatima";
	memset(str, 'a', 3);
	puts(str);
}

But that is a mistake, always copy the string in the str. that why also I was getting the free() error when using it:

e3r2p1% gcc ft_memset.c && ./a.out
zsh: segmentation fault (core dumped)  ./a.out

and :

e3r2p1% gcc ft_memset.c && ./a.out
hello my name is fatima
free(): invalid pointer

zsh: IOT instruction (core dumped)  ./a.out

Now, the code recognize the string allocated space. and free it.
the final code: 
#include "libft.h"

void	*ft_memset(void *str, int c, size_t n)
{
	char *s;

	s = str;
	while (n--)
		*(s++) = c;
	return (s);

}

int	main()
{
	char *str;
	str = malloc(sizeof(char)*50);
	strcpy(str,"hello my name is fatima");
	ft_memset(str, '*', 10);
	printf("%s\n",str);
	free(str);
}

//ft_bzero.fr
What I learn is, we can cast the same string without the need of creating a copy of the void * and cast it to string as we did to the previous memset function, we can just do:

#include "libft.h"

void	ft_bzero(void *s, size_t n)
{
	while(n--)
		*((char *) s++) = '\0';
}


void	*ft_test(void *s, size_t n)
{
	while(n--)
		*((char *) s++) = 'a';
	return (s);
}
int	main()
{
	char str[50];
	strcpy(str,"hello mt namem ek");
	//bzero(str,4);
	//printf("%s", str + 3);
	ft_test(str, 3);
	printf("%s", str);

}

With using *((char *)s++) it's like *(s++), where s is (char *)s, to convert it to string.

##ft_memcpy.c
Pay attention, if we declare a const variable we don't cpy smt to it.

##ft_memmove.c

The diff between memcopy.c and memmove.c is:

memcpy() simply copies data one by one from one location to another. On the other hand memmove() copies the data first to an intermediate buffer, then from the buffer to destination.
memcpy() leads to problems when strings overlap.
//an example of overlaping:
https://www.geeksforgeeks.org/memmove-in-cc/

Sample program to show that memcpy() can lose data.
#include <stdio.h>
#include <string.h>
int main()
{
    char csrc[100] = "Geeksfor";
    memcpy(csrc + 5, csrc, strlen(csrc) + 1);
    printf("%s", csrc);
    return 0;
}
Output: GeeksGeeksfor
//wow finally I figured out the problem of ovrlaping in the ft_memcpy:

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	size_t i = 0;
	while (i < n)
	{
		((unsigned char *) dest) [i]  = ((unsigned char *) src)[i];
		i++;
	}
	return (dest);
}

or this 
void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	size_t i = 0;
	while (n--)
	{
		*((unsigned char *) dest++)  = *((unsigned char *) src++);
	
	}
	return (dest);
}


WILL NOT consider the overlaping problem like the built in function, for the example of src + 5 above!!!
 there for, we use:


void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	size_t i = 0;
	while (n--)
	{
		((unsigned char *) dest) [n]  = ((unsigned char *) src)[n];
	
	}
	return (dest);
}
int main()
{
	char str[50];
	strcpy(str, "hello there whs");
	char dest[50];
	strcpy(dest, "gee");
	ft_memcpy(str + 5,str,14);
	printf("%s", str);

}

I still figuring out while when doing in backwards it affecting the result instead of the normal iteration.

The memcpy copy function shows undefined behavior if the memory regions pointed to by the source and destination pointers overlap. The memmove function has the defined behavior in case of overlapping. So whenever in doubt, it is safer to use memmove in place of memcpy.


In in memmove, it does not cross the same bytes but replace it from the beginning when copying:

the result is

memcpy overlap : GeeksforGeeksforhe
 Geeksforhe
memmove overlap : GeeksforGeeksforGe
 GeeksforGe

of:
int main()
{
	char str[100] = "GeeksforheywasupP";
	char *first, *second;
	first = str;
	second = str;
	printf("Original string :%s\n ", str);
	printf("%s\n", second + 8);
	printf("%s\n", first + 8);

	// when overlap happens then it just ignore it
	memcpy(first + 8, first, 10);
	printf("memcpy overlap : %s\n ", first);
	printf("%s\n", first + 8);

	// when overlap it start from first position
	memmove(second + 8, first, 10);
	printf("memmove overlap : %s\n ",second);
	printf("%s\n", second + 8);


	return 0;
}
https://www.geeksforgeeks.org/memmove-in-cc/ 
https://stackoverflow.com/questions/4415910/memcpy-vs-memmove

https://stackoverflow.com/questions/35014525/comparing-strings-with-or-operators-c

str1 > str2 does not compare the strings either, and while it does "compare their addresses" on many platforms, strictly speaking it is undefined behaviour

the < operator in strings, compare their adresses. so it this case we will compare both the  adress of src amd dest and see if we can come up with a solution:
the pb here is overlaping (chevauchement d'adresse) base on this


//The first version of the solution is:

void	*ft_memmove_version2(void *dest, const void *src, size_t n)
{
	unsigned char dests[300];
	memcpy(dests,src,n);
	memcpy(dest,dests,n);
	return (dest);
}

here we give maximum bytes to the unsigned char, but we can deal with it without the need of giving it bytes.
ALGO of 2nd version of memmove:

//Now we'll compare adress f the two problematic string: str + 8 and str, and based on this we'll write our function.
the diff of two adresses :  !!!!! PLZ BE AWARE THIS METHOD DISPLAY WARINING !!!!
https://stackoverflow.com/questions/12849588/getting-the-difference-between-two-memory-addresses

Two ways of getting a string's adress:

int *str_addr = &str;
printf("%p\n", str_addr);
printf("the adress of str is %p", str);

using a pointer to integer and & operator allows us to know the diff between two adresses:

//A great explanation of the diff between 

https://stackoverflow.com/questions/1201319/what-is-the-difference-between-memmove-and-memcpy#:~:text=With%20memcpy%20%2C%20the%20destination%20cannot,addresses%20from%20low%20to%20high.


void memmove ( void * dst, const void * src, size_t count ) {
    if ((uintptr_t)src < (uintptr_t)dst) {
        // Copy from back to front

    } else if ((uintptr_t)dst < (uintptr_t)src) {
        // Copy from front to back
    }
}

void memcpy ( void * dst, const void * src, size_t count ) {
    if ((uintptr_t)src != (uintptr_t)dst) {
        // Copy in 
#include <fcntl.h>
int main()
{
//	extern	FILE *fd;
//	fd =  fopen("../test.txt","w");
	int fd = open("te.txt",  O_WRONLY | O_CREAT);
	ft_putstr_fd("hello", fd);

}any way you want
    }
}

And this should pretty well explain the difference. memmove always copies in such a way, that it is still safe if src and dst overlap, whereas memcpy just doesn't care as the documentation says when using memcpy, the two memory areas must not overlap.




//strlcpy function, we use the include:

https://stackoverflow.com/questions/59943556/bsd-string-h-for-windows

We need to include the header: #include <bsd/string.h> 
and link when running the code:
gcc ft_strlcpy.c -lbsd && ./a.out
	int long		n;

##ft_strnstr.c
It is similar to strchr, except that it searches for string ‘search term’ instead of a single char


##f_strjoin.c
PAY ATTENTION: an empty string "" different from NULL. 

##ft_split.c
Please note that static variable are store in the data segment not in the stack the gave a propoeerty of preserving their value even after they are out of their scopei. The static variables are stored in the data segment of the memory. The data segment is a part of the virtual address space of a program.

Unlike global functions in C, access to static functions is restricted to the file where they are declared. Therefore, when we want to restrict access to functions, we make them static. Another reason for making functions static can be reuse of the same function name in other files
https://www.geeksforgeeks.org/what-are-static-functions-in-c/

##ft_itoa.c

I tired to do this:
#include "libft.h"

static size_t	ft_len_int(long int n, long int *q)
{
	size_t	count;
	size_t d;

	count = 1;
	if (n < 9)
		return (1);
	while (n >= 10)	
	{
		count++;
		n /= 10;
	}
	d = count;
	while (--d)
		*q *= 10;
	return (count);
}

char	*ft_itoa(int n)
{
	size_t	t;
	size_t	i;
	int	sign;
	long int	q;
	long int	m;
	char *s;

	m = (long int)n;
	i = 0;
	q = 1;
	t = ft_len_int(m, &q);

	s = (char *)malloc(sizeof(char) * (t+1));
	if (!s)
		return (NULL);
	while (i < t)
	{
		s[i] = n / q + '0';
		n %= q;
		q /= 10;
		i++;
	}
	s[i] = '\0';
	return (s);
}

int main()
{
	long int n = 18293894;
	char *s;

	s = ft_itoa(n);
	printf("the s is %s\n",s);
	printf("th elen of s is %ld\n", ft_strlen(s));
	
}
It worked for positiv case, the iteration was from front to back, now we'll try to fill the string from back to front. 

to check for errors in memory we type:

e3r7p1% valgrind -s --leak-check=full ./a.out
==2101519== Memcheck, a memory error detector
==2101519== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2101519== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2101519== Command: ./a.out
==2101519== 
==2101519== Conditional jump or move depends on uninitialised value(s)
==2101519==    at 0x484ED88: __strlen_sse2 (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2101519==    by 0x48EBDB0: __vfprintf_internal (vfprintf-internal.c:1517)
==2101519==    by 0x48D581E: printf (printf.c:33)
==2101519==    by 0x10932B: main (ft_strdup.c:37)

The error here is the null terminator in strdup string.
https://stackoverflow.com/questions/42233936/why-is-valgrind-complaining-about-printf-instead-of-my-uninitialized-counter

##ft_putchar_fd

to write a character in a file we use the write function like this:
write(fd, &c, 1);
the number that it's giving to a file it's called file descriptor: 0 for stdin, 1 stdout, 2 for stderr
https://bottomupcs.com/ch01s03.html
https://www.geeksforgeeks.org/input-output-system-calls-c-create-open-close-read-write/#:~:text=What%20is%20the%20File%20Descriptor,pointers%20to%20file%20table%20entries.
#include "libft.h"

void	ft_putstr_fd(char *s, int fd)
{
	write(fd, s, ft_strlen(s));
}


#include <fcntl.h>
int main()
{
//	extern	FILE *fd;
//	fd =  fopen("../test.txt","w");
	int fd = open("te.txt",  O_WRONLY | O_CREAT);
	ft_putstr_fd("hello", fd);

}

This code, oepn a file in write and create more using the open() function with the file descriptorand then use the function to write the s in the file.

##DEBUGGING:

The -g switch tells the compiler
to record the line numbers
against the code it compiles.


## if we want to  put your archive somewhere else, like /my_lib In that case, we will need to use the -L option to say which directories to search gcc test_code.c -L/my_lib -lhfsecurity -o test_code

gcc ft_putstr_fd.c -L . -lft -o hi


## In substr function, we need to check the len of str and the size.
if the required size is more than the len, the size takes len value. and if the len of str is less than the start, it returns NULL;

## When to use typedef structure alias and when not:

Recursive structures need names.
If you use the typedef command, you can normally skip giving the struct a proper name. But in a recursive structure, you need to include a pointer to the same type. C syntax won’t let you use the typedef alias, so you need to give the struct a proper name. That’s why the struct here is called struct island.
typedef struct island {
 char *name;
 char *opens;
 char *closes;
 struct island *next;
} island;


##ft_lsnew and ft_display:

#include "libft.h"

t_list	*ft_lstnew(void *content)
{
	t_list	*s;

	s = (t_list *)malloc(sizeof(t_list));
	if (!s)
		return (NULL);
	s->content = content;
	s->next = NULL;
	return (s);
}
/*
static void	ft_display(t_list *s)
{
	while (s != NULL)
	{
		printf("%d\n", *(int *)s->content);
		s = s->next;
	}
}

int main()
{
	t_list *N;
	int a = 42;
	void *p = &a;
	N = ft_lstnew(p);
	ft_display(N);
	free(N);
}*/


Please note that we can display our struct with casting int value:

while(s)
{	
	printf("%s\n", *(int *)s->content);
	s = s->next;
}
Also, we cant set an exemple to see:
int a = 43;
void *p = &a (we assign to void * the adress of int);
and then we use the function ft_lsadd(void *) to create a struct which the next value is set to NULL
t_list N= ft_lsadd(p);

and then we can use this methode to have two t_list structute and then pas the adress of the first and the second to the function ft_lsadd_front to see the result.

The ALGO is simple:

if both are not NULL, the next of new is set to the first structure, and this later is set to new. like swaping positons baby.

##ft_lstlast:

Two methods:

Using the size of the structure:
ny itersting size - -1 time. 

t_list	*ft_lstlast(t_list *lst)
{
	int	size;
	int	i;

	i = 1;
	size = ft_lstsize(lst);
	while (i < size)
	{
		lst = lst->next;
		i++;
	}
	return (lst);
}

BY creating an inside structure, and assign it the value of the current struct-next, and one the s is NULL we return the structure->next it's stored in the created node.
